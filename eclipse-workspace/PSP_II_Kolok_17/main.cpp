/*
 * main.cpp
 *
 *  Created on: May 28, 2022
 *      Author: David
 */
/*
 * Да се креира хиерархија на класи за работа со возови. За секој воз е познат серискиот број, бројот на
вагони и динамички алоцирана низа со вагони (за секој вагон се знае неговата тежина и неговото ID).
Возовите може да бидат дизел или електрични.
За дизел возовите дополнително се чува и основна потрошувачка во литри на 100 километри, просечна цена
по литар и висина на еко такса која дополнително се плаќа. Нивната цена за поминати 100 км се пресметува
кога на еко таксата ќе се додаде потрошувачката во литри на 100 км (се добива кога основната потрошувачка
во литри ќе се зголеми за 5% за секој тон тежина на вагоните) помножена со цената по литар.
За електричните возовите дополнително се чува и основна потрошувачка во kWh на 100 километри и
просечната цена по kWh. Нивната цена за поминати 100 км се пресметува кога потрошувачката во kWh на
100 км (се добива кога основната потрошувачка во kWh ќе се зголеми за 10% за секој тон тежина на
вагоните) ќе се помножи со цената по kWh.
За секоја класа да се напишат следните методи и преоптоварени оператори:
• Конструктори и деструктор;
• Оператор -- за бришење на вагон на крај од композицијата на вагони;
• Оператор << за печатење на сите информации;
За класите за дизел и за електрични возови дополнително да се напише функција cena100() која ја
пресметува цената за поминати 100 км. Дополнително да се напише функција najekonomichen која ќе прима
низа од покажувачи кон возови и нивниот број и која со помош на функцијата cena100() ќе го пронајде возот
со најмала потрошувачка, а неговиот реден број ќе го врати како излез од функцијата.
 */

#include<iostream>
#include<cstring>

using namespace std;
struct Vagon{
	int tezina;
	int ID;
};
class Voz{
protected:
	int seriski;
	Vagon *vagoni;
	int brVagoni;
public:
	Voz(int seriskiF,Vagon *vagoniF,int brVagoniF){
		seriski = seriskiF;
		for(int i = 0;i<brVagoniF;i++){
			vagoni[i] = vagoniF[i];
		}
		brVagoni = brVagoniF;
	}
	~Voz(){delete [] vagoni;}
};

